import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'java-library'
    id 'org.openjfx.javafxplugin' version "$jfxPlugin"
    id 'com.vanniktech.maven.publish' version "$mavenPublish"
}

group 'io.github.palexdev'
version "$vfx"

repositories {
    mavenCentral()
}

dependencies {
    // Deps
    api "io.github.palexdev:mfxcore:$mfxcore"
    api "io.github.palexdev:mfxeffects:$mfxeffects"

    // Test Deps
    testImplementation "org.openjdk.jmh:jmh-core:$jmh"
    testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$jmh"
    testImplementation platform("org.junit:junit-bom:$junit")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "org.testfx:testfx-core:$testfx"
    testImplementation "org.testfx:testfx-junit5:$testfx"
    testImplementation "io.github.palexdev:mfxresources:$mfxresources"
    testImplementation("io.github.palexdev:scenicview:$scenicView") {
        exclude(group: "org.openjfx")
    }
    testImplementation "fr.brouillard.oss:cssfx:$cssfx"
    testImplementation "net.datafaker:datafaker:$dataFaker"
    testImplementation "com.google.code.gson:gson:$gson"
}

java {
    sourceCompatibility = "$jdk"
    targetCompatibility = "$jdk"
    withSourcesJar()
    withJavadocJar()
    tasks.withType(Jar).each { it.archiveBaseName.set("virtualizedfx") }
}

test {
    useJUnitPlatform()
    // Because the new TestFX is garbage :)
    jvmArgs += [
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED'
    ]
    filter {
        excludeTestsMatching "JMH*"
    }
}

javafx {
    version = "$jfx"
    modules = ['javafx.controls', 'javafx.fxml']
    configurations = ["compileOnly", "testImplementation"]
}

configurations {
    // Remove vanniktech nonsense
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(mavenPlainJavadocJar)) {
            mavenPlainJavadocJar.enabled = false
        }
    }
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()
}



